import { type NextPage } from "next";
import { signIn, signOut, useSession } from "next-auth/react";
import { useState } from "react";
import Head from "next/head";
import Link from "next/link";
import { api } from "~/utils/api";
import CartItem from '@prisma/client'
import { prisma } from "~/server/db";
import ItemModal from '../components/ItemModal'
import { HiX } from 'react-icons/hi'
import { motion } from 'framer-motion'

const Home: NextPage = () => {
  const [checkedItems, setCheckedItems] = useState<ShoppingItem[]>([])
  const [items, setItems] = useState<CartItem[]>([])
  const { data: sessionData } = useSession();

  const {data: itemsData, isLoading} = api.itemRouter.getShoppingList.useQuery({userId: sessionData ? sessionData.user.id: ''}, {
    onSuccess: (shoppingItems) => {
      setItems(shoppingItems);
      const checked = shoppingItems.filter((item) => item.checked);
      setCheckedItems(checked);
    }
  });

  const [modalOpen, setModalOpen] = useState<boolean>(false)

  

  const {mutate: deleteItem} = api.itemRouter.deleteShoppingItem.useMutation({onSuccess: (shoppingItem) => {
    setItems((prev) => prev.filter((item) => item.id !== shoppingItem.id))
  }});

  const {mutate: toggleChecked} = api.itemRouter.toggleChecked.useMutation({onSuccess: (shoppingItem) => {
    if (checkedItems.some((item) => item.id === shoppingItem.id)) {
      // remove it from the checked items
      setCheckedItems((prev) => prev.filter((item) => item.id !== shoppingItem.id))
    } else {
      // add it to the checked items
      setCheckedItems((prev) => [...prev, shoppingItem])
    }
  }});

  if (sessionData) {
    return (
      <>
        <Head>
          <title>Shopping List</title>
          <meta name="description" content="Generated by create-t3-app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        {modalOpen && <ItemModal setModalOpen={setModalOpen} setItems={setItems}/>}
        <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
          <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
            <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
              My Shopping List
            </h1>
            <div className="flex flex-col items-center gap-2">
            <div className="flex flex-col items-center justify-center gap-4">
              <p className="text-center text-2xl text-white">
                {sessionData && <button 
                  onClick={() => setModalOpen(true)}
                  className="bg-violet-500 text-sm p-2 rounded-md transition hover:bg-violet-600" type="button">My Shopping List
                </button>}
              </p>
              <ul className="text-center text-2xl text-white">
                {<span>Your shopping cart:</span>}
                {items.map((item) => {
              const { id, name } = item
  
              return (
                <li key={id} className='flex w-full items-center justify-between'>
                  <div className='relative'>
                    <div className='pointer-events-none absolute inset-0 flex origin-left items-center justify-center'>
                      <motion.div
                        initial={{ width: 0 }}
                        animate={{ width: checkedItems.some((item) => item.id === id) ? '100%' : 0 }}
                        transition={{ duration: 0.2, ease: 'easeInOut' }}
                        className='h-[2px] w-full translate-y-px bg-red-500'
                      />
                    </div>
                    <span
                      onClick={() => {
                        console.log('clicked', id)
                        toggleChecked({
                          id,
                          checked: checkedItems.some((item) => item.id === id) ? false : true,
                        })
                      }}>
                      {name}
                    </span>
                  </div>
                  <HiX onClick={() => deleteItem({ id })} className='cursor-pointer text-lg text-red-500' />
                </li>
              )
            })}
              </ul>
              <button
                className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
                onClick={sessionData ? () => void signOut() : () => void signIn()}
              >
                {sessionData ? "Sign out" : "Sign in"}
              </button>
            </div>
            </div>
          </div>
        </main>
      </>
    );
  }
  else {
    return (
<>
        <Head>
          <title>Shopping List</title>
          <meta name="description" content="Generated by create-t3-app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        {modalOpen && <ItemModal setModalOpen={setModalOpen} setItems={setItems}/>}
        <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
          <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
            <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
              My Shopping List
            </h1>
            <div className="flex flex-col items-center gap-2">
            <div className="flex flex-col items-center justify-center gap-4">
              <p className="text-center text-2xl text-white">
                {sessionData && <button 
                  onClick={() => setModalOpen(true)}
                  className="bg-violet-500 text-sm p-2 rounded-md transition hover:bg-violet-600" type="button">My Shopping List
                </button>}
              </p>
              <button
                className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
                onClick={sessionData ? () => void signOut() : () => void signIn()}
              >
                {sessionData ? "Sign out" : "Sign in"}
              </button>
            </div>
            </div>
          </div>
        </main>
      </>
    )
  }

  
};

export default Home;
